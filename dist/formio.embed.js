/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Formio"] = factory();
	else
		root["Formio"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/cjs/CDN.js":
/*!************************!*\
  !*** ./lib/cjs/CDN.js ***!
  \************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// All external libs URLs should be injected through this class.\n// CDN libs URLs are accessible throuh CDN object properties\n// like Formio.cdn.ace === 'http://cdn.form.io/ace/1.4.12'.\n// For latest version use empty string\nclass CDN {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl || 'https://cdn.form.io';\n        this.overrides = {};\n        this.libs = {\n            'ace': '1.4.12',\n            'bootstrap': '4.6.2',\n            'ckeditor': '19.0.0',\n            'flatpickr': '4.6.8',\n            'flatpickr-formio': '4.6.13-formio.2',\n            'font-awesome': '4.7.0',\n            'grid': 'latest',\n            'moment-timezone': 'latest',\n            'quill': '2.0.0-dev.3',\n            'shortcut-buttons-flatpickr': '0.4.0',\n            'uswds': '2.4.8',\n            'core': ''\n        };\n        this.updateUrls();\n    }\n    getVersion(lib) {\n        return this.libs[lib];\n    }\n    // Sets a specific library version\n    setVersion(lib, version) {\n        this.libs[lib] = version;\n        this.updateUrls();\n    }\n    // Sets base CDN url for all libraries\n    setBaseUrl(url) {\n        this.baseUrl = url;\n        this.updateUrls();\n    }\n    // Allows to override CDN url for a specific library\n    setOverrideUrl(lib, url) {\n        this.overrides[lib] = url;\n        this.updateUrls();\n    }\n    // Removes override for a specific library\n    removeOverride(lib) {\n        delete this.overrides[lib];\n        this.updateUrls();\n    }\n    // Removes all overrides\n    removeOverrides() {\n        this.overrides = {};\n        this.updateUrls();\n    }\n    buildUrl(cdnUrl, lib, version) {\n        let url;\n        if (version === 'latest' || version === '') {\n            url = `${cdnUrl}/${lib}`;\n        }\n        else {\n            url = `${cdnUrl}/${lib}/${version}`;\n        }\n        return url;\n    }\n    updateUrls() {\n        for (const lib in this.libs) {\n            if (lib in this.overrides) {\n                this[lib] = this.buildUrl(this.overrides[lib], lib, this.libs[lib]);\n            }\n            else {\n                this[lib] = this.buildUrl(this.baseUrl, lib, this.libs[lib]);\n            }\n        }\n    }\n}\nexports[\"default\"] = CDN;\n\n\n//# sourceURL=webpack://Formio/./lib/cjs/CDN.js?");

/***/ }),

/***/ "./lib/cjs/Embed.js":
/*!**************************!*\
  !*** ./lib/cjs/Embed.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.embed = void 0;\nconst CDN_1 = __importDefault(__webpack_require__(/*! ./CDN */ \"./lib/cjs/CDN.js\"));\n// eslint-disable-next-line max-statements\nfunction embed(config = {}) {\n    const scripts = document.getElementsByTagName('script');\n    config = Object.assign(config, window.FormioConfig);\n    let thisScript = null;\n    let i = scripts.length;\n    const scriptName = config.scriptName || 'formio.embed.';\n    while (i--) {\n        if (scripts[i].src && (scripts[i].src.indexOf(scriptName) !== -1)) {\n            thisScript = scripts[i];\n            break;\n        }\n    }\n    if (thisScript) {\n        const query = {};\n        const queryString = thisScript.src.replace(/^[^?]+\\??/, '');\n        queryString.replace(/\\?/g, '&').split('&').forEach((item) => {\n            query[item.split('=')[0]] = item.split('=')[1] && decodeURIComponent(item.split('=')[1]);\n        });\n        let scriptSrc = thisScript.src.replace(/^([^?]+).*/, '$1').split('/');\n        scriptSrc.pop();\n        if (config.formioPath) {\n            config.formioPath(scriptSrc);\n        }\n        scriptSrc = scriptSrc.join('/');\n        query.script = query.script || (`${config.updatePath ? config.updatePath() : scriptSrc}/formio.form.min.js`);\n        query.styles = query.styles || (`${config.updatePath ? config.updatePath() : scriptSrc}/formio.form.min.css`);\n        const cdn = query.cdn || 'https://cdn.jsdelivr.net/npm';\n        const resolveLibs = (cdn) => {\n            const libs = {\n                uswds: {\n                    fa: true,\n                    js: `${cdn}/uswds@2.10.0/dist/js/uswds.min.js`,\n                    css: `${cdn}/uswds@2.10.0/dist/css/uswds.min.css`\n                },\n                fontawesome: {\n                    css: `${cdn}/font-awesome@4.7.0/css/font-awesome.min.css`\n                },\n                bootstrap: {\n                    css: `${cdn}/bootstrap@4.6.0/dist/css/bootstrap.min.css`\n                }\n            };\n            // Check if using cdn.form.io standart folders format\n            if (cdn instanceof CDN_1.default) {\n                const url = cdn.baseUrl;\n                libs.uswds.js = `${url}/uswds/${cdn.getVersion('uswds')}/uswds.min.js`;\n                libs.uswds.css = `${url}/uswds/${cdn.getVersion('uswds')}/uswds.min.css`;\n                libs.fontawesome.css = `${url}/font-awesome/${cdn.getVersion('font-awesome')}/css/font-awesome.min.css`;\n                libs.bootstrap.css = `${url}/bootstrap/${cdn.getVersion('bootstrap')}/css/bootstrap.min.css`;\n            }\n            return libs;\n        };\n        config = Object.assign({\n            script: query.script,\n            style: query.styles,\n            class: (query.class || 'formio-form-wrapper'),\n            src: query.src,\n            form: null,\n            submission: null,\n            project: query.project,\n            base: query.base,\n            submit: query.submit,\n            includeLibs: (query.libs === 'true' || query.libs === '1'),\n            template: query.template,\n            debug: (query.debug === 'true' || query.debug === '1'),\n            config: {},\n            redirect: (query.return || query.redirect),\n            before: () => { },\n            after: () => { }\n        }, config);\n        /**\n         * Print debug statements.\n         *\n         * @param  {...any} args Arguments to pass to the console.log method.\n         */\n        const debug = (...args) => {\n            if (config.debug) {\n                console.log(...args);\n            }\n        };\n        /**\n         * Creates a new DOM element.\n         *\n         * @param {string} tag The HTMLElement to add to the wrapper or shadow dom.\n         * @param {Object} attrs The attributes to add to this element.\n         * @param {Array<Object>} children The children attached to this element.\n         */\n        const createElement = (tag, attrs, children) => {\n            const element = document.createElement(tag);\n            for (const attr in attrs) {\n                if (attrs.hasOwnProperty(attr)) {\n                    element.setAttribute(attr, attrs[attr]);\n                }\n            }\n            (children || []).forEach(child => {\n                element.appendChild(createElement(child.tag, child.attrs, child.children));\n            });\n            return element;\n        };\n        debug('Embedding Configuration', config);\n        if (config.addPremiumLib) {\n            config.addPremiumLib(config, scriptSrc);\n        }\n        // The id for this embedded form.\n        const id = `formio-${Math.random().toString(36).substring(7)}`;\n        config.id = id;\n        debug('Creating form wrapper');\n        let wrapper = createElement('div', {\n            'id': `\"${id}-wrapper\"`\n        });\n        // insertAfter doesn't exist, but effect is identical.\n        thisScript.parentNode.insertBefore(wrapper, thisScript.parentNode.firstElementChild.nextSibling);\n        // If we include the libraries, then we will attempt to run this in shadow dom.\n        if (config.includeLibs && (typeof wrapper.attachShadow === 'function') && !config.premium) {\n            wrapper = wrapper.attachShadow({\n                mode: 'open'\n            });\n            config.config.shadowRoot = wrapper;\n        }\n        const global = (name) => {\n            const globalValue = window[name];\n            debug(`Getting global ${name}`, globalValue);\n            return globalValue;\n        };\n        const addStyles = (href, global) => {\n            if (!href) {\n                return;\n            }\n            if (typeof href !== 'string' && href.length) {\n                href.forEach(ref => addStyles(ref));\n                return;\n            }\n            debug('Adding Styles', href);\n            const link = createElement('link', {\n                rel: 'stylesheet',\n                href\n            });\n            if (global) {\n                // Add globally as well.\n                document.head.appendChild(link);\n            }\n            wrapper.appendChild(createElement('link', {\n                rel: 'stylesheet',\n                href\n            }));\n        };\n        const addScript = (src, globalProp, onReady) => {\n            if (!src) {\n                return;\n            }\n            if (typeof src !== 'string' && src.length) {\n                src.forEach(ref => addScript(ref));\n                return;\n            }\n            if (globalProp && global(globalProp)) {\n                debug(`${globalProp} already loaded.`);\n                return global(globalProp);\n            }\n            debug('Adding Script', src);\n            wrapper.appendChild(createElement('script', {\n                src\n            }));\n            if (globalProp && onReady) {\n                debug(`Waiting to load ${globalProp}`);\n                const wait = setInterval(() => {\n                    if (global(globalProp)) {\n                        clearInterval(wait);\n                        debug(`${globalProp} loaded.`);\n                        onReady(global(globalProp));\n                    }\n                }, 100);\n            }\n        };\n        // Create a loader\n        addStyles(`${config.updatePath ? config.updatePath() : scriptSrc}/formio.embed.min.css`);\n        debug('Creating loader');\n        const loader = createElement('div', {\n            'class': 'formio-loader'\n        }, [{\n                tag: 'div',\n                attrs: {\n                    class: 'loader-wrapper'\n                },\n                children: [{\n                        tag: 'div',\n                        attrs: {\n                            class: 'loader text-center'\n                        }\n                    }]\n            }]);\n        wrapper.appendChild(loader);\n        // Add the wrapper for the rendered form.\n        debug('Creating form element');\n        const formElement = createElement('div', {\n            class: config.class\n        });\n        wrapper.appendChild(formElement);\n        // Add the main formio script.\n        addScript(config.script, 'Formio', (Formio) => {\n            const renderForm = () => {\n                addStyles(config.style);\n                const isReady = config.before(Formio, formElement, config) || Formio.Promise.resolve();\n                const form = (config.form || config.src);\n                debug('Creating form', form, config.config);\n                isReady.then(() => {\n                    Formio.license = true;\n                    Formio.createForm(formElement, form, config.config).then((instance) => {\n                        const submitDone = (submission) => {\n                            debug('Submision Complete', submission);\n                            let returnUrl = config.redirect;\n                            // Allow form based configuration for return url.\n                            if (!returnUrl &&\n                                (instance._form &&\n                                    instance._form.settings &&\n                                    (instance._form.settings.returnUrl ||\n                                        instance._form.settings.redirect))) {\n                                debug('Return url found in form configuration');\n                                returnUrl = instance._form.settings.returnUrl || instance._form.settings.redirect;\n                            }\n                            if (returnUrl) {\n                                const formSrc = instance.formio ? instance.formio.formUrl : '';\n                                const hasQuery = !!returnUrl.match(/\\?/);\n                                const isOrigin = returnUrl.indexOf(location.origin) === 0;\n                                returnUrl += hasQuery ? '&' : '?';\n                                returnUrl += `sub=${submission._id}`;\n                                if (!isOrigin && formSrc) {\n                                    returnUrl += `&form=${encodeURIComponent(formSrc)}`;\n                                }\n                                debug('Return URL', returnUrl);\n                                window.location.href = returnUrl;\n                                if (isOrigin) {\n                                    window.location.reload();\n                                }\n                            }\n                        };\n                        if (config.submit) {\n                            instance.nosubmit = true;\n                        }\n                        debug('Form created', instance);\n                        // Remove the loader.\n                        debug('Removing loader');\n                        wrapper.removeChild(loader);\n                        // Set the default submission data.\n                        if (config.submission) {\n                            debug('Setting submission', config.submission);\n                            instance.submission = config.submission;\n                        }\n                        // Allow them to provide additional configs.\n                        debug('Triggering embed event');\n                        Formio.events.emit('formEmbedded', instance);\n                        debug('Calling ready callback');\n                        config.after(instance, config);\n                        // Configure a redirect.\n                        instance.on('submit', (submission) => {\n                            debug(\"on('submit')\", submission);\n                            if (config.submit) {\n                                debug(`Sending submission to ${config.submit}`);\n                                const headers = {\n                                    'content-type': 'application/json'\n                                };\n                                const token = Formio.getToken();\n                                if (token) {\n                                    headers['x-jwt-token'] = token;\n                                }\n                                Formio.fetch(config.submit, {\n                                    body: JSON.stringify(submission),\n                                    headers: headers,\n                                    method: 'POST',\n                                    mode: 'cors',\n                                })\n                                    .then(resp => resp.json())\n                                    .then(submission => submitDone(submission));\n                            }\n                            else {\n                                submitDone(submission);\n                            }\n                        });\n                    });\n                });\n            };\n            if (config.base) {\n                Formio.setBaseUrl(config.base);\n            }\n            if (config.project) {\n                Formio.setProjectUrl(config.project);\n            }\n            // Add premium modules\n            if (global('premium')) {\n                debug('Using premium module.');\n                Formio.use(global('premium'));\n            }\n            if (global('vpat')) {\n                debug('Using vpat module.');\n                Formio.use(global('vpat'));\n            }\n            if (config.template) {\n                if (config.includeLibs) {\n                    addStyles(config.libs[config.template].css);\n                    addScript(config.libs[config.template].js);\n                    if (config.libs[config.template].fa) {\n                        addStyles(config.libs.fontawesome.css, true);\n                    }\n                }\n                let templateSrc;\n                if (cdn instanceof CDN_1.default) {\n                    templateSrc = `${cdn[config.template]}/${config.template}.min`;\n                }\n                else {\n                    templateSrc = `${cdn}/@formio/${config.template}@latest/dist/${config.template}.min`;\n                }\n                addStyles(`${templateSrc}.css`);\n                addScript(`${templateSrc}.js`, config.template, (template) => {\n                    debug(`Using ${config.template}`);\n                    Formio.use(template);\n                    renderForm();\n                });\n            }\n            else if (global('uswds')) {\n                debug('Using uswds module.');\n                Formio.use(global('uswds'));\n            }\n            // Default bootstrap + fontawesome.\n            else if (config.includeLibs) {\n                Formio.cdn = new CDN_1.default();\n                config.libs = resolveLibs(query.cdn || Formio.cdn);\n                addStyles(config.libs.fontawesome.css, true);\n                addStyles(config.libs.bootstrap.css);\n            }\n            if (config.premium) {\n                addStyles(config.premium.css);\n                addScript(config.premium.js, 'premium', (premium) => {\n                    debug('Using premium');\n                    Formio.use(premium);\n                    renderForm();\n                });\n            }\n            // Render the form if no template is provided.\n            if (!config.template && !config.premium) {\n                renderForm();\n            }\n        });\n    }\n    else {\n        // Show an error if the script cannot be found.\n        document.write('<span>Could not locate the Embedded form.</span>');\n    }\n}\nexports.embed = embed;\n\n\n//# sourceURL=webpack://Formio/./lib/cjs/Embed.js?");

/***/ }),

/***/ "./lib/cjs/formio.embed.js":
/*!*********************************!*\
  !*** ./lib/cjs/formio.embed.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Embed_1 = __webpack_require__(/*! ./Embed */ \"./lib/cjs/Embed.js\");\n(0, Embed_1.embed)();\n\n\n//# sourceURL=webpack://Formio/./lib/cjs/formio.embed.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./lib/cjs/formio.embed.js");
/******/ 	__webpack_exports__ = __webpack_exports__.Formio;
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});